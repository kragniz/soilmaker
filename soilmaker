#!/usr/bin/env python
import random

class Svg(object):
    __header = '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   width="2600"
   height="2500">

  <metadata
     id="metadata">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>

  <defs>
    <style type="text/css"><![CDATA[
      text {
        font-family: Sans;
      }
      path {
        stroke: #000000;
        stroke-width:8;
        stroke-linecap:round;
        fill:none;
      }
    ]]></style>
  </defs>
   <g
     id="profile"
     transform="translate(500,200)">'''

    __footer = '''    <path
       d="M 500,0 500, 2000 250, 2200 0, 2000 0, 0 z"
       id="outline"/>
  </g>
</svg>'''

    __bottom = '''    <path
       style="fill:#ff00ff;fill-opacity:0.5;stroke:none"
       d="M 500,700 500, 2000 250, 2200 0, 2000 0, 700 z"
       id="bottom"/>'''

    __horizon = '''
    <g
       id="horizon">
      <rect
         style="fill:#{colour};fill-opacity:0.75;stroke:none"
         width="500"
         height="{hight}"
         x="0"
         y="{start}" />
      <g transform="translate(500, {midpoint})">
           <path d="M 0, 0 75, 0"/>
           {textblock}
      </g>
      <g transform="translate(0,{depth})">
        <path d="M -50, 0 500, 0"/>
        <text font-size="{fontsize}" transform="translate(-60,25)" text-anchor="end">
          {measurement}
        </text>
      </g>
    </g>'''

    def textblock(self, text, fontsize=50, linemax=50):
        line = ''
        lines = []
        for w in text.split():
            if len(line + ' ' + w) < linemax:
                line = line + ' ' + w
            else:
                lines += ['<tspan x="75" dy="{fontsize}">%s</tspan>' % line]
                line = w
        if line: lines += ['<tspan x="75" dy="{fontsize}">%s</tspan>' % line]
        return ('<text font-size="{fontsize}" transform="translate(25,-30)">' +
               '\n'.join(lines) + '</text>').format(fontsize=fontsize)

    def horizon(self, depth, start=0, text=''):
        return self.__horizon.format(start=start,
                                     depth=depth,
                                     hight=depth-start,
                                     measurement=depth/10,
                                     midpoint=(depth+start)/2,
                                     fontsize=50,
                                     textblock=self.textblock(text),
                                     colour=''.join([hex(random.randint(50, 255))[2:] for i in range(3)]))

    def make(self, *args):
        lastHorizon = 0
        horizons = ''
        for h in args:
            horizons = self.horizon(h[0], lastHorizon, h[1]) + horizons
            lastHorizon = h[0]
        return self.__header + horizons + self.__footer

if __name__ == '__main__':
    s = Svg()
    print s.make((200, 'Some soil'), (865, 'Some more soil'), (1500, 'A very nice patch of soil going a rather large way into the ground'))
    #print s.textblock('hello there this is a long bit of text thank you very much')