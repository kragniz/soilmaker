#!/usr/bin/env python
from rpy2.robjects.packages import importr
import re
import os

class Svg(object):
    __header = '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   width="2600"
   height="2500">

  <metadata
     id="metadata">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>

  <defs>
    <style type="text/css"><![CDATA[
      text {
        font-family: Sans;
      }
      path {
        stroke: #000000;
        stroke-width:8;
        stroke-linecap:round;
        fill:none;
      }
    ]]></style>
  </defs>
   <g
     id="profile"
     transform="translate(500,200)">'''

    __footer = '''    <path
       d="M 500, 0 500, 2000 250, 2200 0, 2000 0, 0 z"
       id="outline"/>
  </g>
</svg>'''

    __bottom = '''    <g>
      <path style="fill:{colour};stroke:none"
         d="M 500, {start} 500, 2000 250, 2200 0, 2000 0, {start} z"/>
      <g transform="translate(500, {midpoint})">
           <path d="M 0, 0 75, 0"/>
           {textblock}
      </g>
    </g>'''

    __horizon = '''
    <g>
      <rect
         style="fill:{colour};stroke:none"
         width="500"
         height="{hight}"
         x="0"
         y="{start}" />
      <g transform="translate(500, {midpoint})">
           <path d="M 0, 0 75, 0"/>
           {textblock}
      </g>
      <g transform="translate(0,{depth})">
        <path d="M -50, 0 500, 0"/>
        <text font-size="{fontsize}" transform="translate(-60,25)" text-anchor="end">
          {measurement}
        </text>
      </g>
    </g>'''

    def __init__(self):
      self.munsell = importr('munsell')

    def textblock(self, text, fontsize=50, linemax=50):
        '''Return a string containing a word wrapped svg text object'''
        line = ''
        lines = []
        for w in text.split():
            if len(line + ' ' + w) < linemax:
                line = line + ' ' + w
            else:
                lines += ['<tspan x="75" dy="{fontsize}">%s</tspan>' % line]
                line = w
        if line: lines += ['<tspan x="75" dy="{fontsize}">%s</tspan>' % line]
        return ('<text font-size="{fontsize}" transform="translate(25,-30)">' +
               '\n'.join(lines) + '</text>').format(fontsize=fontsize)

    def horizon(self, depth, colour, start=0, text=''):
        '''Return a string containing a complete horizon as svg'''
        return self.__horizon.format(start=start,
                                     depth=depth,
                                     hight=depth-start,
                                     measurement=depth/10,
                                     midpoint=(depth+start)/2,
                                     fontsize=50,
                                     textblock=self.textblock(text),
                                     colour=self.colour(colour))

    def bottom(self, start, colour, text=''):
        '''Return a string containing the bottom horizon as svg'''
        return self.__bottom.format(start=start,
                                    midpoint=(start+2000)/2,
                                    textblock=self.textblock(text),
                                    colour=self.colour(colour),
                                    )
    def colour(self, mnsl):
        '''Return the hex value of a munsell colour'''
        try:
            return self.munsell.mnsl(mnsl)[0]
        except:
            return '#BBBBBB'

    def deabbreviate(self, s):
        '''Replace some common abbreviations with longer words'''
        abbreviations = {
            'S': 'sand',
            'LS': 'loamy sand',
            'SL': 'sandy loam',
            'Z': 'silt',
            'ZL': 'silt loam',
            'L': 'loam',
            'SCL': 'sandy clay loam',
            'ZCL': 'silty clay loam',
            'CL': 'clay loam',
            'SC': 'sandy clay',
            'ZC': 'silty clay',
            'C': 'clay',
            'P': 'peat',
            'SP': 'silty peat',
            'LP': 'loamy peat',
            'PS': 'peaty sand',
            'PL': 'peaty loam'
        }
        out = []
        for w in s.split():
            if w in abbreviations:
                out += [abbreviations[w]]
            else:
                out += [w]
        return ' '.join(out)

    def generate(self, inputFile, outputFile=None):
        '''Generate and write a complete svg file'''
        lastHorizon = 0
        horizons = ''
        for n in self.parse(open(inputFile).read()):
            text = '({horizonDesignation}){colour}{munsell}; {texture}.'.format(
                    horizonDesignation=n['designation'],
                    colour=' %s' % n['description'] if n['description'] else '',
                    munsell=' (%s)' % n['munsell'] if n['munsell'] else '',
                    texture=self.deabbreviate(n['texture']))

            if n['depth'] == '-':
                horizons = self.bottom(int(lastHorizon)*10,
                                       n['munsell'],
                                       text=text) + horizons
            else:
                horizons = self.horizon(int(n['depth'])*10,
                                        n['munsell'],
                                        int(lastHorizon)*10,
                                        text=text) + horizons
            lastHorizon = n['depth']
        if not outputFile:
            outputFile = os.path.split(inputFile)[1]+'.svg'
        with open(outputFile, 'w') as f:
            f.write(self.__header + horizons + self.__footer)

    def match(self, pattern, text):
        '''Return an iterator which can be used to check if a regex has a match in a string.
        Use like this:
            for m in match(pattern, text):
                #only gets excecuted if a match is present'''
        m = re.compile(pattern)
        matches = m.match(text)
        if matches:
            yield matches.group()

    def parse(self, text):
        '''Parse a block of text and return the bits of data we need'''
        blocks = re.findall('Horizon number:.+?Fe/Mn:', text, flags=re.S)
        blockdata = []
        for b in blocks:
            print b, '-----------'
            n = int(re.search('(?<=Horizon number: ).+', b).group())
            depth = re.search('(?<=Depth:).+', b).group().strip()
            for m in self.match('\d+(cm)?\+', depth):
                depth = '-'
            if depth != '-':
                depth = int(re.search('(?<=\d-)\d+(?=\s*?cm)', depth.strip()+'cm').group())
            des = re.search('(?<=Horizon designation:).+', b).group().strip()
            texture = re.search('(?<=Texture:).*', b).group().strip()
            matrix = re.search('(?<=Matrix:).*', b).group().strip()
            munsell, colourDesc = '', ''
            if matrix:
                munsell = ' '.join(matrix.split()[:2])
                colourDesc = ' '.join(matrix.split()[2:])
            blockdata += [{'depth': depth,
                           'designation': des,
                           'munsell': munsell,
                           'description': colourDesc,
                           'texture': texture}]
        return blockdata

if __name__ == '__main__':
    s = Svg()
    print s.generate('/home/louis/git/soilmaker/examples/profile3/profile3')